---
title: The first week
layout: default
hasSlides: true
---
<section>
    <h2 class="slide-only">Here's what we're going to do today:</h2>
    <div class="grid-x">
    	<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
		    <ol class="toc">
		        <li><a href="#intro">Course introduction</a></li>
		        <li><a href="#clientServer">What does a database do?</a></li>
		        <li><a href="#access">What do we do with a database?</a></li>
		        <li><a href="#dev">A tool for using a database</a></li>
		        <li><a href="#history">What are the basic components of a db?</a></li>
		        <li><a href="#terms">Terminology</a></li>
		        <li><a href="#org">Organization of a (relational) database</a></li>
		        <li><a href="#relationships">Types of relationships</a></li>
		        <li><a href="#def">Types of data (and other ways to define columns)</a></li>
		        <li><a href="#ddlDml">Types of commands</a></li>
		        <li><a href="#query">What is a query?</a></li>
		        <li><a href="#formatting">How to format your code</a></li>
		        <li><a href="#lab">Lab time!</a></li>
		    </ol>
    	</div>
    </div>
</section>
<section id="intro">
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1 post-section">
			<h2 class="h2">Welcome!</h2>
			<p>My name is Simon Borer. You can reach me at <a href="mailto:brrs0390@humbermail.ca">brrs0390@humbermail.ca</a>.</p>
			<p>In this course, we'll learn...</p>
			<ul>
				<li>what a database is,</li>
				<li>different tools for interacting with a database,</li>
				<li>different techniques for interacting with a database, and</li>
				<li>how to design and optimize a database.</li>
			</ul>
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">Anybody can do just fine in this course.</h2>
			<p>Come to class every week.</p>
			<p>Do your assignments on time.</p>
			<p>Ask questions.</p>
			<p>Don't cheat.</p>
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">Books</h2>
			<ul>
				<li>Murach’s Oracle SQL and PL/SQL, 2nd Edition
					<ul>
						<li>ISBN <code>978-1-890774-80-6</code></li>
					</ul>
				</li>
				<li>Murach’s MySQL, 2nd Edition
					<ul>
						<li>ISBN <code>978-1-890774-82-0</code></li>
					</ul>
				</li>
			</ul>
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">Assignments</h2>
			<p>Almost every week you'll have an assignment to complete.</p>
			<p>Assignments are due by 11:59pm the day <em>before</em> class.</p>
			<p>If they're late, you lose 5% per day for up to 5 days. After that, you get a zero.</p>
			<p>If there's a reason you can't complete an assignment on time, talk to me <em>before</em> it's due to see if we can work something out.</p>
			<p>These assignments are a big part of your final grade.</p>
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
		  <h2 class="h2">Rubric</h2>
		  <table>
		  	<thead><tr>
		  		<td>Evaluation</td>
		  		<td>Format</td>
		  		<td>Due</td>
		  		<td>Percentage</td>
		  	</tr></thead>
		  	<tbody>
		  		<tr>
		  			<td>Mid term</td>
		  			<td>Paper</td>
		  			<td>Week 7</td>
		  			<td>30</td>
		  		</tr>
		  		<tr>
		  			<td>Final exam</td>
		  			<td>Paper</td>
		  			<td>Week 15</td>
		  			<td>30</td>
		  		</tr>
		  		<tr>
		  			<td>Quizzes, Assignments, Labs</td>
		  			<td>Paper and digital</td>
		  			<td>Weekly</td>
		  			<td>40</td>
		  		</tr>
		  	</tbody>
		  	<tfoot>
		  		<tr>
		  			<td colspan="3" class="text-center">Total</td>
		  			<td>100</td>
		  		</tr>
		  	</tfoot>
		  </table>	
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
		<h2 class="h2">Seriously, don't cheat.</h2>
		<p>Repercussions will be severe.</p>
		<p>Also, it will be really awkward for me.</p>
		<p>If you are feeling overwhelmed, talk to me. We can arrange peer tutoring, extensions, etc.</p>
		<p>If you are copying code from a resource (i.e. textbook, tutorial), write it out yourself and cite your source.</p>
		<p>If you are copying code from another student, you will <em>both</em> get in trouble.</p>
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">Two aspects of my teaching philosophy.</h2>
			<ol><li>I'm here for you to bug. Please ask me all your questions.</li><li>Muscle memory is key. It's going to bug you how often you have to type things you already know in your head, but you need to know it in your fingers.</li></ol>	
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
		<h2 class="h2">The Syllabus</h2>
		<p>
			<a class="button" target="_blank" href="<%= site.basePath %>/assets/documents/HTTP5105-syllabus.pdf">Download the syllabus<span class="show-for-sr">Opens in a new window.</span></a>		
		</p>
		</div>
	</div>
</section>
<section id="clientServer">
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">What a database does</h2>
			<h3>Components of a client-server system</h3>
			<a href="<%= site.basePath %>/assets/images/server-diagram.png" target='_blank'>
				<img class="diagram" src="<%= site.basePath %>/assets/images/diagram.png" alt="A diagram of a web client making a request from a web server, which in turn either returns static files, or a dynamic request populated by data from a database.">
				<span class="show-for-sr">Open image in a new window</span>
			</a>
		</div>
	</div>
</section>
<section id="access">
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">What do we do with a database?</h2>
			<p>Most databases are accessed using the Structured Query Language (SQL). SQL can either be written into server-side code (like <abbr title="The rare recursive acronym: 'PHP: Hypertext Preprocessor'">PHP</abbr> or <abbr title="Active Server Pages">ASP</abbr>) or run through a <abbr title="Graphical User Interface">GUI</abbr> like SQL Developer.</p>
			<a href="<%= site.basePath %>/assets/images/diagram-server_db.png" target='_blank'>
				<img class="diagram image-3q" src="<%= site.basePath %>/assets/images/diagram-server-db.png" alt="A diagram of a web client making a request from a web server, which in turn either returns static files, or a dynamic request populated by data from a database.">
				<span class="show-for-sr">Open image in a new window</span>
			</a>
		</div>
	</div>
</section>
<section id="dev">
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">Installing SQL Developer</h2>
			<ol>
				<li>Get a copy of SQL Developer from <a href="https://www.oracle.com/technetwork/developer-tools/sql-developer/downloads/index.html" target='_blank'>the Oracle website</a>.</li>
				<li>
					<ol>
						<li>Are you on Windows? You're done!</li>
						<li>Are you on a Mac? Unless you have <abbr title="Java Development Kit">JDK</abbr> 8 or 9 (not 10!) installed and set as your default already, you need to <a target="_blank" href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">download</a> and install JDK 8.</li>
						<li>If you install JDK 8, but you get an error telling you you <em>still</em> need JDK 8, then, using a <a href="https://www.sublimetext.com/" target='_blank'>text editor</a>, you need to open the file <code>$HOME/.sqldeveloper/18.2.0/product.conf</code> (note that <code>/.sqldeveloper/</code> is a hidden folder - if you don't know how to view hidden files and folders, see <a href="https://stackoverflow.com/questions/29135878/what-is-the-quickest-way-to-toggle-hide-show-hidden-files-on-a-mac-os-x-yosemite" target='_blank'>this StackOverflow answer</a>).</li>
						<li>Edit <code>product.conf</code>, changing <pre><code># SetJavaHome ../../jdk</code></pre> to <pre><code>SetJavaHome /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents</code></pre> (or wherever your JDK 8 is installed).</li>
					</ol>
				</li>
			</ol>
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
		<h2 class="h2">A little presentational tweak...</h2>
		<p>Just to make things a little more readable, go to <code>Oracle SQL Developer > Preferences</code> on Mac, or <code>Tools > Preferences</code> on PC.</p>
		<p>Under <code>Code Editor > Line Gutter</code>, check the box for <em>Show Line Numbers</em>.</p>
		<p>Under <code>Database > Worksheet</code>, check the box for <em>Grid in checker board or Zebra pattern</em>.</p>
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">Let's see if it works!</h2>
				<figure>
					<img src="<%= site.basePath %>/assets/images/new-connection.jpg" alt="Green plus symbol">
					<figcaption>To create a connection to a database, click on the green plus symbol in the top right of SQL Developer</figcaption>		
				</figure>
				<figure>
					<img src="<%= site.basePath %>/assets/images/new-connection--fields.jpg" alt="Fields to be filled out to create a new connection to the humber database.">
					<figcaption>Fill out the appropriate fields as indicated. <code>Connection name</code> is whatever you'll remember. <code>Username</code> is your student number. The rest of the values are required as indicated in the screenshot.</figcaption>
				</figure>
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">Populating your database</h2>
			<p>Download <a href="<%= site.basePath %>/assets/documents/create_ap_tables.sql">this .sql file</a>.</p>
			<p>Open this file with SQL Developer (<code>File > Open</code>) and then...</p>
				<figure>
					<img src="<%= site.basePath %>/assets/images/run-script.jpg" alt="Image indicating placement of 'run script' icon in SQL developer">
					<figcaption>...click the 'Run Script' icon (or press F5)</figcaption>
				</figure>
			<p>When prompted, choose to run this on the connection you've already created and opened.</p>
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">Your first query</h2>
			<figure>
				<img src="<%= site.basePath %>/assets/images/worksheet.jpg" alt="How to open a new worksheet">
				<figcaption>You should already have a worksheet open, but if you don't, click on the worksheet icon to open one up.</figcaption>
			</figure>
			<p>In the worksheet, type <pre><code>SELECT * FROM vendors</code></pre></p>
			<p>You should see all kinds of wonderful data!</p>
			<img src="<%= site.basePath %>/assets/images/output.jpg" alt="Database output">
		</div>
	</div>
</section>
<section id="history">
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">History</h2>
			<p>Relational databases have been around since 1970, and Oracle has been around (in one form or another) for 40 years.</p>
			<p>IBM (DB2) and Microsoft (SQL Server) released their relational database systems in the mid-80s.</p>
			<p>Since the technology world was a bit slower then, they were able to agree on standards (a.k.a. the SQL language).</p>
			<p>In 1995, just as the world wide web was being born, along came the open-source MySQL, democratizing data for the whole world.</p>
			<p>In 2008, Sun Microsystems bought MySQL, and, two years late, Oracle bought Sun Microsystems, because that's just how the world is now, I guess.</p>
		</div>
	</div>
</section>
<section id="terms">
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">Terminology</h2>
			<p>Let's start learning some words!</p>
			<figure>
				<img src="<%= site.basePath %>/assets/images/output--rows-columns.jpg" alt="Demonstration of rows and columns">
				<figcaption>These are easy - rows are horizontal sets of data, and columns are vertical categories of data.</figcaption>
			</figure>
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">Primary key</h2>
			<p>Another important element that every table should have is a <strong>primary key</strong>.</p>
			<figure>
				<img src="<%= site.basePath %>/assets/images/output--primary-key.jpg" alt="Demonstration of a primary key">
				<figcaption>Primary keys are something you define when you create a table. They <em>must</em> be unique for each row! No two rows can have the same primary key.</figcaption>
			</figure>
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
		<h2 class="h2">What makes a database 'relational'?</h2>
		<p>This course will primarily deal with relational databases. There are other kinds, and we'll touch on them later in the course, but the relational database is one of the primary tools of the internet.</p>
		<p>Relational databases have multiple tables that are related to one another. In addition to a <strong>primary key</strong>, tables will often have a <strong>foreign key</strong>. This is to establish a relationship between the data sets, and take our data from two dimensions to 3D!</p>
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<figure>
				<img src="<%= site.basePath %>/assets/images/output--foreign-key.jpg" alt="Demonstration of a foreign key.">
				<figcaption>If we look at our <code>INVOICES</code> table, you'll see that if references <code>VENDOR_ID</code>, which is the primary key for the <code>VENDOR</code> table. This means we can easily reference the information about the vendor that this invoice belongs to from the <code>VENDOR</code> table.</figcaption>
			</figure>	
		</div>
	</div>
</section>
<section id="relationships">
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">Types of relationships</h2>
			<p>There are 3 types of relationship between tables, but only one of them is good!</p>
			<p>A <strong>one-to-many</strong> relationship means that the primary key of one table is referenced multiple times in another table. That's good! If we only had a single table, that information would have to be repeated many times. Instead, we put it in one table once and reference it externally over and over. That's efficient.</p>
			<p>A <strong>one-to-one</strong> relationship means that any row in your table is only referenced one time by another table. If that's the case, it's more efficient to store all the data in a single table.</p>
			<p>A <strong>many-to-many</strong> relationship is <em>real</em> messy. Think of students and classes. Students have many classes and classes have many students. There are two reasons this is messy: 1) because we only want one piece of information per cell in our table, and 2) because only want one column per category of data. We can solve this by creating a 'joining table' that sits between them - a table that creates a one-to-many relationship with both tables.</p>
			<p>Wow, that got a little complicated! Don't worry, we'll go back over all this. For today, just know that tables have relationships, and efficient relationships are best.</p>
		</div>
	</div>
</section>
<section id="def">
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">Types of Data</h2>
			<p>There are certain ways that we keep our database organized and our data manageable. One is by defining a primary key. Oracle will throw an error if we try to add a row that has a primary key that's not unique. Another is by defining what kind of data can go in each column.</p>
			<figure>
				<img src="<%= site.basePath %>/assets/images/column-info.jpg" alt="Demonstration of clicking on a table to see information about it's columns.">
				<figcaption>In SQL Developer, if we click on a table in our table tree, it will show us information about the columns in that table, including what type of data is allowed.</figcaption>
			</figure>	
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<p>Some common data types:</p>
			<ul>
				<li>CHAR/VARCHAR2 - Strings of numbers, letters and symbols</li>
				<li>NUMBER - Integers and decimal numbers</li>
				<li>DATE - Dates and times</li>
				<li>BOOLEAN - A value of either true or false</li>
			</ul>
			<p>Columns can also specify whether or not they allow <em>null</em> (unknown) values. Columns can also have default values. These are all things you define when you set up your table (like we did at the beginning of class).</p>
		</div>
	</div>
</section>
<section id="ddlDml">
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">Types of Commands</h2>
			<table>
				<thead>
					<tr>
						<td colspan="2">Categories of SQL Commands</td>
					</tr>
					<tr>
						<td>Category</td>
						<td>Examples</td>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>Data Manipulation Language (DML Statements)</td>
						<td>
							<ul>
								<li><code>SELECT</code></li>
								<li><code>INSERT</code></li>
								<li><code>UPDATE</code></li>
								<li><code>DELETE</code></li>
							</ul>
						</td>
					</tr>
					<tr>
						<td>Data Definition Language (DDL Statements)</td>
						<td>
							<ul>
								<li><code>CREATE</code></li>
								<li><code>TRUNCATE</code></li>
								<li><code>ALTER</code></li>
								<li><code>RENAME</code></li>
								<li><code>DROP</code></li>
							</ul>
						</td>
					</tr>
					<tr>
						<td>Data Control Language (DCL Statements)</td>
						<td>
							<ul>
								<li><code>GRANT</code></li>
								<li><code>REVOKE</code></li>
							</ul>
						</td>
					</tr>
					<tr>
						<td>Transaction Control Statements</td>
						<td>
							<ul>
								<li><code>COMMIT</code></li>
								<li><code>ROLLBACK</code></li>
								<li><code>SAVEPOINT</code></li>
							</ul>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
</section>
<section id="query">
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">What is a query?</h2>
			<p>As you might have guess from the name of the language, queries are pretty important to <abbr title="Structured Query Language">SQL</abbr>. Queries are <code>SELECT</code> statements. Queries return a <strong>results table</strong>. Queries can return results from a single table, or they can take advantage of the power of relational databases by using a <code>JOIN</code> clause in our query to get results that have combined data from multiple tables. There are different types of <code>JOIN</code>s that we can use - an <code>INNER JOIN</code> returns only data that can be related between the two tables by matching a cell (usually our PRIMARY and FOREIGN keys), whereas an <code>OUTER JOIN</code> will return data from both tables, without the need for a relationship.</p>
			<p>There are more ways to specify how tables can be combined (<code>LEFT</code> and <code>RIGHT JOIN</code>s), but we're starting to get ahead of ourselves - for the first couple weeks, we're going to focus on getting data from a single table.</p>	
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">Common query elements</h2>
			<table>
				<thead>
					<tr>
						<th>Code</th>
						<th>Description</th>
						<th>Example</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td><code>SELECT</code></td>
						<td>Columns of data to include in the results table. The <code>*</code> character selects all columns. Can select multiple columns when the column names are comma-separated. Column names can be aliased with <code>AS</code> clause, concatenated with <code>||</code>, and/or formatted with literal strings inside single ASCII (straight, not curly) quotation marks. <code>SELECT</code> can use the <code>DISTINCT</code> keyword to eliminate duplicate rows from the results table.</td>
						<td><pre><code>SELECT vendor_name AS name, vendor_address1 || ' ' || vendor_address2 AS address
						FROM vendors</code></pre></td>
					</tr>
					<tr>
						<td><code>FROM</code></td>
						<td>The name of the table (or tables, when we start to use <code>JOIN</code>) that we're selecting data from.</td>
						<td><pre><code>SELECT vendor_name
						FROM vendors</code></pre></td>
					</tr>
					<tr>
						<td><code>WHERE</code></td>
						<td>Filters our results. This is where things get interesting, and we'll work on this a bunch next week. <code>WHERE</code> can use comparison operators (<code>=</code>, <code>></code>, <code><</code>, <code><=</code>, <code>>=</code>, <code><></code>), arithmetic operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>), and/or logical operators (<code>AND</code>, <code>OR</code>, <code>NOT</code>) to compare to declared values (including dates) or values from other columns. Additionally, the <code>IN</code> operator can check a value against a list (either declared or generated by a subquery). This can be modified with <code>NOT</code> to exclude results that are included in the list. There are additional operators we can use with <code>WHERE</code>, including <code>BETWEEN</code>, <code>LIKE</code>, and <code>IS NULL</code> (and their negations), but that's a lot for one day!</td>
						<td><pre><code>
							SELECT invoice_number, invoice_date, invoice_total 
							FROM invoices
							WHERE invoice_total > credit_total
							OR invoice_total - payment_total - credit_total > 0
							AND terms_id NOT IN (2, 5)
						</code></pre></td>
					</tr>
					<tr>
						<td><code>ORDER BY</code></td>
						<td>This orders our results by specified column(s). It can also reference aliases created in the <code>SELECT</code> statment, expressions or column positions. Defaults to ascending order (lowest to highest), but order can be declared with the keywords <code>DESC</code> and <code>ASC</code> This can be applied to any column in the table, not just the ones being output in the results table. The exception to this is when using <code>SELECT</code> with the <code>DISTINCT</code> keyword.</td>
						<td><pre><code>SELECT vendor_name FROM vendors ORDER BY vendor_name DESC</code></pre></td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">There's more!</h2>
			<p>But not today :) <code>FETCH</code>, <code>OFFSET</code>, et al. can wait.</p>	
		</div>
	</div>
</section>
<section id="formatting">
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">Formatting your code</h2>
			<p>You should always code according to a formatting convention.</p>
			<p>Different languages have different formatting conventions (sometimes due to restrictions in the language, sometimes to distinguish it from other languages).</p>
			<p>Your workplace team may have conventions that supplement/supercede common conventions, but always default to common conventions.</p>
			<p>In SQL, we...</p>
			<ul>
					<li>capitalize our keywords,</li>
					<li>have line breaks between statements (and longer clauses),</li>
					<li>indent wrapped lines,</li>
					<li>use underscores to separate words in our column names,</li>
					<li>reference column names in lowercase,</li>
					<li>use comments only when necessary (and keep them up-to-date).</li>
				</ul>	
		</div>
	</div>
</section>
<section id="lab">
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2 class="h2">Lab time!</h2>
			<p>Labs are your time in-class to try out what we've learned, and make mistakes!</p>
			<p>If you can't finish something by the end of class, do your best to explain where you're stuck - you'll get marks for that.</p>
			<p>When class is done, turn in what you have. This is <em>not</em> a take-home assignment, and I won't accept labs done outside of class.</p>
			<p>If you're finished before the end of class, please see if anyone needs a hand!</p>
		</div>
	</div>
</section>
<section>
	<div class="grid-x">
		<div class="cell large-6 large-offset-3 medium-10 medium-offset-1">
			<h2>Lab Questions:</h2>
			<ol>
				<li>Run the following query:
					<pre><code>
						SELECT invoice_number, invoice_date, invoice_total
						FROM invoices
						WHERE invoice_date BETWEEN '1-APR-08' AND '31-MAY-08'
						AND invoice_total > 2000.00
						ORDER BY invoice_date ASC, invoice_total ASC
					</code></pre>
					<strong>Describe, in your own words, what each element of this query is doing to produce the result table you see.</strong>
				</li>
				<li>Run the following query:
					<pre><code>
						SELECT vendor_id, invoice_date, invoice_total
						FROM invoices
						WHERE invoice_date BETWEEN '1-APR-08' AND '31-MAY-08'
						AND invoice_total > 2000.00
						ORDER BY invoice_date ASC, invoice_total ASC
					</code></pre>
					<strong>Describe, in your own words, what each element of this query is doing to produce the result table you see.</strong>
				</li>
				<li>Run the following query:
					<pre><code>
						SELECT vendor_name, vendor_address1, vendor_city, vendor_state
						FROM vendors
						WHERE vendor_state IN ('MI', 'AZ', 'TX')
						ORDER BY vendor_state DESC
					</code></pre>
					<strong>Describe, in your own words, what each element of this query is doing to produce the result table you see.</strong>
				</li>
				<li>Run the following query:
					<pre><code>
						SELECT invoice_number, invoice_total, payment_total, invoice_total - payment_total AS "Balance Owing"
						FROM invoices
						WHERE invoice_total - payment_total <> 0
						AND invoice_total >= 500
						ORDER BY invoice_number
					</code></pre>
					<strong>Describe, in your own words, what each element of this query is doing to produce the result table you see.</strong>
				</li>
				<li>Write a query to display the vendor_name, vendor_state, vendor_city. Create an alias for the three columns. Create and alieas for vendor_name called Vendor, an alias for vendor_state called state, and an alias for vendor_city called City. Order the results of the output so it displays in ascending sequence by vendor_city.</li>
				<li>Write a query that will display the invoice_id, invoice_number, invoice_total minus payment_total with an alias as balance. Only show invoices that have an invoice_date between April 1, 2008 and April 30, 2008. Remember your date format for these values.</li>
				<li>Write a query to show vendor_id, vendor_name, vendor_contact_first_name, vendor_contact_last_name, and vendor_phone. The columns vendor_contact_first_name and vendor_contact_last_name are to be shown in the output as one single column with an alias for this clulumn called Vendor Contact Name. Sort the results by vendor_contact_last_name.</li>
			</ol>	
		</div>
	</div>
</section>